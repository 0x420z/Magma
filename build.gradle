buildscript {
    ext {
        grgitVersion = '2.1.2'
        aptPluginVersion = '0.15'
    }
    repositories {
        maven { //noinspection GroovyAssignabilityCheck
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.ajoberstar:grgit:${grgitVersion}"
        classpath "net.ltgt.gradle:gradle-apt-plugin:${aptPluginVersion}"
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'net.ltgt.apt-idea'


group = "space.npstr.magma"
version = "${getMyVersion()}"

sourceCompatibility = 10
targetCompatibility = 10

repositories {
    jcenter()
    mavenCentral()
    maven { //noinspection GroovyAssignabilityCheck
        url 'https://jitpack.io'
    }
}

dependencies {
    compile project(':opus-java')
    compile group: 'org.json', name: 'json', version: '20180130'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    // project reactor & reactive websocket client
    compile group: 'org.springframework', name: 'spring-webflux', version: '5.0.5.RELEASE'
    compile group: 'io.undertow', name: 'undertow-core', version: '2.0.4.Final'

    // annotations
    compile group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '3.1.2'
    compile group: 'space.npstr', name: 'annotations', version: '0.0.1'

    // immutable objects, to pass values around
    annotationProcessor group: 'org.immutables', name: 'value', version: '2.5.6'
    compileOnly group: 'org.immutables', name: 'value', version: '2.5.6', classifier: 'annotations'
}

compileJava {
    dependsOn(clean)
    options.encoding = 'UTF-8'
    compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
    //noinspection UnnecessaryQualifiedReference
    distributionType = Wrapper.DistributionType.ALL
}


build.doLast {
    println 'Version: ' + version
}

jar.mustRunAfter clean
publishToMavenLocal.dependsOn jar
// called by jitpack
task install {
    dependsOn publishToMavenLocal
    doLast {
        println 'Version: ' + version
    }
}
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

def pomConfig = {
    licenses {
        license {
            //noinspection GroovyAssignabilityCheck
            name 'No License'
            url 'https://choosealicense.com/no-permission/'
            distribution 'repo'
        }
    }
    developers {
        developer {
            //noinspection GroovyAssignabilityCheck
            name 'Napster'
            email 'napster@npstr.space'
        }
    }
    scm {
        url 'https://github.com/napstr/Magma'
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar {
                //noinspection GroovyAssignabilityCheck
                classifier 'sources'
            }
            groupId project.group
            artifactId project.name
            //noinspection GroovyAssignabilityCheck
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'A reactive voice only api for Discord, focused on delivering music at scale')
                root.appendNode('name', 'Magma')
                root.appendNode('url', 'https://github.com/napstr/Magma')
                root.children().last() + pomConfig
            }
        }
    }
}


idea {
    project {
        configureAnnotationProcessing = true
    }
    module {
        apt {
            addGeneratedSourcesDirs = true
            addAptDependencies = true
            addCompileOnlyDependencies = false
            mainDependenciesScope = 'PROVIDED'
        }
    }
}

//returns either a git tag if there is one on this commit, or the commit hash, to be used as a version
@SuppressWarnings("GrMethodMayBeStatic")
String getMyVersion() {

    def headTag = grgit.tag.list().find {
        it.commit == grgit.head()
    }

    if (headTag) {
        headTag.getName()
    } else {
        "${grgit.head().id}-SNAPSHOT"
    }
}
